substitutions:
  devicename: valve_x
  upper_devicename: Valve X

esphome:
  name: $devicename
  friendly_name: $upper_devicename

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Stepper motor configuration
stepper:
  - platform: uln2003
    id: valve_x_stepper
    pin_a: GPIO27
    pin_b: GPIO26
    pin_c: GPIO25
    pin_d: GPIO33
    max_speed: 250 steps/s
    # Helps to reduce the heat generated by the motor
    sleep_when_done: true
    acceleration: inf
    deceleration: inf

sensor:
  - platform: uptime
    name: $upper_devicename Uptime Sensor

binary_sensor:
  - platform: gpio
    name: "Valve Upper Limit"
    id: valve_x_open_limit
    pin:
      number: GPIO14
      inverted: true
      mode: INPUT_PULLUP
    on_press:
      then:
        - stepper.set_target:
            id: valve_x_stepper
            target: !lambda |-
              return id(valve_x_stepper).current_position;

  - platform: gpio
    name: "Valve X Bottom Limit"
    id: valve_x_closed_limit
    pin:
      number: GPIO12
      inverted: true
      mode: INPUT_PULLUP
    on_press:
      then:
        - stepper.set_target:
            id: valve_x_stepper
            target: !lambda |-
              return id(valve_x_stepper).current_position;

number:
  # Adjust the current position of the stepper motor (for putting it in the right position)
  - platform: template
    name: "Valve X Position"
    id: valve_x_position
    min_value: 0
    max_value: 1024
    step: 1
    set_action:
      then:
        - stepper.set_target:
            id: valve_x_stepper
            target: !lambda "return x;"

button:
  - platform: template
    name: "Open Valve X"
    icon: "mdi:rotate-left"
    on_press:
      - stepper.set_target:
          id: valve_x_stepper
          target: 10240

  - platform: template
    name: "Close Valve X"
    icon: "mdi:rotate-right"
    on_press:
      - stepper.set_target:
          id: valve_x_stepper
          target: -10240
